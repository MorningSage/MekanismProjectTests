plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id 'java'
	id "com.diffplug.spotless" version "5.12.4"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "org.sonarqube" version "2.8"
	id "jacoco"
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url = "https://maven.fabricmc.net/" }
	maven {
		name = "BuildCraft"
		url = "https://mod-buildcraft.com/maven"
		content {
			includeGroup "alexiil.mc.lib"
		}
	}
	maven {
		name = "HYWLA"
		url = "https://maven.tehnut.info/"
		content {
			includeGroup "mcp.mobius.waila"
		}
	}
	maven {
		name = "shedaniel"
		url = "https://maven.shedaniel.me"
		content {
			includeGroup "me.sargunvohra.mcmods"
			includeGroup "me.shedaniel"
			includeGroup "me.shedaniel.cloth"
			includeGroup "me.shedaniel.cloth.api"
		}
	}
	maven {
		name = "Technici4n"
		url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
		content {
			includeGroup "dev.technici4n"
			includeGroup "net.fabricmc.fabric-api" // until ItemApiLookup PR #1352 is merged.
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	//Fabric api
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// unit test dependencies
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
	testImplementation("org.assertj:assertj-core:3.19.0")
	testImplementation("com.google.guava:guava-testlib:21.0")
	testImplementation("org.mockito:mockito-junit-jupiter:3.9.0")
	testImplementation("org.mockito:mockito-inline:3.9.0")

	// Annotation Processors
	annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16
	options.deprecation = false
}

// ensure everything uses UTF-8 and not some random codepage chosen by gradle
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

///////////////////
// Version Number

ext.pr = System.getenv('PR_NUMBER') ?: ""
if (ext.pr) {
	version = version + "+pr." + ext.pr
}

ext.branch = System.getenv('BRANCH') ?: ""
if (ext.branch) {
	version = version + "+branch." + ext.branch
}

ext.tag = System.getenv('TAG') ?: ""
if (ext.tag && ext.tag.startsWith("fabric/v") && System.getenv("GITHUB_ENV")) {
	version = ext.tag.substring("fabric/v".length())
	def envFile = new File(System.getenv("GITHUB_ENV"))
	// Validate that the rest is a semver version
	if (version ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/) {
		envFile.append("VERSION=${version}")
	} else {
		throw new GradleException("Invalid semver: $version")
	}
}

ext.isAlpha = project.version.contains("alpha")
ext.isBeta = project.version.contains("beta")

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources {
			srcDir 'src/generated/resources'
		}
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiCompile.extendsFrom(compileClasspath)
	siteexportCompile.extendsFrom(compileClasspath)
	siteexportRuntime.extendsFrom(runtimeClasspath)
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

//////////////
// Aritfacts
processResources {
	exclude '.cache'
}

jar {
	finalizedBy 'remapJar'

	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.api.output.resourcesDir

	manifest {
		attributes([
				"Specification-Title": "Specification-Title",
				"Specification-Vendor": "Specification-Vendor",
				"Specification-Version": "${project.version}",
				"Implementation-Title": "${project.name}",
				"Implementation-Version": "${project.version}",
				"Implementation-Vendor" :"Implementation-Vendor",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs": "modid.mixins.json"
		])
	}
}

task javadocs(type: Javadoc) {
	classpath = sourceSets.main.compileClasspath
	source = sourceSets.api.java
	include "net/fabricmc/api/**"

	options.addStringOption('Xdoclint:none', '-quiet')
	options.encoding = 'UTF-8'
	options.charSet = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadocs) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	from sourceSets.api.allSource
}

task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output
	include "net/fabricmc/api/**"

	from sourceSets.api.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
	afterEvaluate {
		tasks.withType(JavaCompile).all {
			it.options.annotationProcessorPath = files()
		}
	}
}

tasks.withType(GenerateModuleMetadata) {
	enabled = false
}